/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.0.RC2"
    }
}

version = '0.1.0.3'
def artifactId = projectDir.name
def versionNumber = version

apply plugin: "io.spring.dependency-management"

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

apply plugin: 'maven-publish'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.10.77'
    }
}
dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    // compile 'com.google.guava:guava:21.0'
    compile 'com.google.code.gson:gson:2.8.0'

    compile 'ca.uhn.hapi.fhir:hapi-fhir-base:2.5'
    compile 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu3:2.5'

	// C-CDA export uses Apache FreeMarker templates
	compile 'org.freemarker:freemarker:2.3.26-incubating'

    // JTS for location processing
    compile group: 'com.vividsolutions', name: 'jts-core', version: '1.14.0'
    // used to convert the ma_geo GeoJSON file to JTS
    compile group: 'org.wololo', name: 'jts2geojson', version: '0.10.0'
	
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'
	
    compile group: 'com.github.javafaker', name: 'javafaker', version: '0.13'

    // google guava for some data structures
    compile 'com.google.guava:guava:23.0'

	compile group: 'guru.nidi', name: 'graphviz-java', version: '0.2.2'

    //AWS Dependencies for pushing data to S3
    compile 'com.amazonaws:aws-java-sdk-s3'
    // https://mvnrepository.com/artifact/com.typesafe/config
    compile group: 'com.typesafe', name: 'config', version: '1.3.2'


    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    testCompile fileTree(dir: 'lib/mdhtruntime/mdht', include: '*.jar')
    testCompile fileTree(dir: 'lib/mdhtruntime/non-mdht', include: '*.jar')
	testCompile 'org.mockito:mockito-core:2.7.22'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.innovaccer.analytics'
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username 'admin'
                password 'sparkyourlife'
            }
            url "http://lib.innovaccer.com:8081/artifactory/gradle-local"
        }
    }
}



task graphviz(type: JavaExec) {
	description 'Generate rule visualization'
	
	classpath sourceSets.main.runtimeClasspath
	main = "Graphviz"
}

task cleanOutput {
    delete fileTree(dir: 'output' , include: '**/*')
}

// Define the main class for the application
mainClassName = 'App'
